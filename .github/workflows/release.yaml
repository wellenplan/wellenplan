name: Release Container Image

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  pull_request:

jobs:
  container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Prepare additional Metadata
        id: additional_meta
        run: |
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ghcr.io/wellenplan/wellenplan
          flavor: |
            latest=auto
          labels: |
            name=Wellenplan
            summary=${{ github.event.repository.description }}
            url=${{ github.event.repository.html_url }}
            vcs-ref=${{ github.sha }}
            revision=${{ github.sha }}
            release=${{ github.sha }}
            build-date=${{ steps.additional_meta.outputs.created }}
            io.k8s.display-name=Wellenplan
            io.k8s.description=${{ github.event.repository.description }}
            io.openshift.tags=wellenplan
            org.opencontainers.image.title=${{ github.event.repository.name }}
            org.opencontainers.image.description=${{ github.event.repository.description }}
            org.opencontainers.image.url=${{ github.event.repository.html_url }}
            org.opencontainers.image.source=${{ github.event.repository.clone_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.spdx_id }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build container image
        id: docker_build_ghcr
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          load: true
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          cache-to: type=gha,mode=max
          labels: |
            ${{ steps.meta.outputs.labels }}
            version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'ghcr.io/wellenplan/wellenplan:${{ steps.meta.outputs.version }}'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always() 
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push container image
        id: docker_push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: ${{ github.event_name != 'pull_request' && startsWith(github.event.ref, 'refs/tags/v') }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          labels: |
            ${{ steps.meta.outputs.labels }}
            version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}

      - name: Set up Helm
        uses: azure/setup-helm@v2.1
        with:
          version: v3.9.0

      - name: Update version in Helm chart
        if: startsWith(github.ref, 'refs/tags/v')
        uses: mikefarah/yq@v4.25.2
        with:
          cmd: yq eval '(.appVersion = "v${{ steps.meta.outputs.version }}") | (.version = "${{ steps.meta.outputs.version }}")' -i charts/wellenplan/Chart.yaml

      - name: Set up chart-testing
        uses: helm/chart-testing-action@v2.2.1
        with:
          version: v3.6.0

      - name: Run chart-testing (lint)
        run: ct --config .github/ct.yaml lint

      - name: Create kind cluster
        uses: helm/kind-action@v1.3.0

      - name: Prepare kind cluster
        run: |
          kubectl create namespace wellenplan

      - name: Load container image
        run: kind load docker-image --name chart-testing 'ghcr.io/wellenplan/wellenplan:${{ steps.meta.outputs.version }}'

      - name: Run chart-testing (install)
        run: ct install --config=.github/ct.yaml --helm-extra-set-args '--set=image.tag=${{ steps.meta.outputs.version }} --timeout 30m0s'

      - name: Set up chart-releaser
        if: startsWith(github.ref, 'refs/tags/v')
        uses: helm/chart-releaser-action@v1.4.0
        with:
          install_only: true

      - name: Package helm chart
        run: |
          cr package charts/wellenplan

      - name: Upload Helm chart
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          cr upload --skip-existing -o wellenplan -r wellenplan/helm-charts --token ${{ secrets.ORGA_USER_TOKEN }} -p .cr-release-packages

      - name: Index Helm chart
        run: |
          cr index -o wellenplan -r wellenplan/helm-charts -c https://charts.wellenplan.io/ -i index.yaml

      - name: Push index file
        if: startsWith(github.ref, 'refs/tags/v')
        uses: dmnemec/copy_file_to_another_repo_action@v1.1.1
        env:
          API_TOKEN_GITHUB: ${{ secrets.ORGA_USER_TOKEN }}
        with:
          source_file: index.yaml
          destination_repo: wellenplan/helm-charts
          destination_folder: .
          destination_branch: gh-pages
          user_email: wellenplan-bot@users.noreply.github.com
          user_name: wellenplan-bot
